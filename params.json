{"name":"pathed","tagline":"munge the Bash PATH environment variable","body":"# NAME\r\n\r\nApp::pathed - munge the Bash PATH environment variable\r\n\r\n# SYNOPSIS\r\n\r\n    # PATH=$(pathed --unique --delete rbenv)\r\n    # PATH=$(pathed --append /home/my/bin -a /some/other/bin)\r\n    # PATH=$(pathed --prepend /home/my/bin -p /some/other/bin)\r\n    # for i in $(pathed --split); do ...; done\r\n    # pathed --check\r\n    # pathed --man\r\n\r\n# DESCRIPTION\r\n\r\nThe Bash `PATH` environment variable contains a colon-separated list of paths.\r\n`pathed` - \"path editor\" - can split the path, append, prepend or remove\r\nelements, remove duplicates and reassemble it.\r\n\r\nThe result is then printed so you can assign it to the `PATH` variable. If\r\n`--split` is used, each path element is printed on a separate line, so you can\r\niterate over them, for example.\r\n\r\nThe path elements can also be checked with `--check` to make sure that the\r\nindicated directories exist and are readable.\r\n\r\nThe following command-line options are supported:\r\n\r\n- \\--append, -a <path>\r\n\r\n    Appends the given path to the list of path elements. This option can be\r\n    specified several times; the paths are appended in the given order.\r\n\r\n- \\--prepend, -p <path>\r\n\r\n    Prepends the given path to the list of path elements. This option can be\r\n    specified several times; the paths are prepended in the given order. For\r\n    example:\r\n\r\n        pathed -p first -p second -p third\r\n\r\n    will result in `third:second:first:$PATH`.\r\n\r\n- \\--delete, -d <substr>\r\n\r\n    Deletes those path elements which contain the given substring. This option can\r\n    be specified several times; the path elements are deleted in the given order.\r\n\r\n    When options are mixed, `--append` is processed first, then `--prepend`, then\r\n    `--delete`.\r\n\r\n- \\--unique, -u\r\n\r\n    Removes duplicate path elements.\r\n\r\n- \\--split, -s\r\n\r\n    Prints each path element on its own line. If this option is not specified, the\r\n    path elements are printed on one line, joined by colons, like you would\r\n    normally specify the `PATH` variable.\r\n\r\n- \\--check, -c\r\n\r\n    Checks whether each path element is a readable directory and prints warnings if\r\n    necessary. Warnings are printed only once per path element, even if that\r\n    element occurs several times in `PATH`.\r\n\r\n    When `--check` is used, the path is not printed. `--check` and `--split` are\r\n    mutually exclusive.\r\n\r\n- \\--help, -h\r\n\r\n    Prints the synopsis.\r\n\r\n- man\r\n\r\n    Prints the whole documentation.\r\n\r\n# WHY pathed?\r\n\r\nThe initial motivation for writing `pathed` came when I tried to install\r\n`vim` with `homebrew` while `rbenv` was active. `vim` wanted to be compiled\r\nwith the system ruby, so I was looking for a quick way to remove `rbenv` from\r\nthe `PATH`:\r\n\r\n    PATH=$(pathed -d rbenv) brew install vim\r\n\r\n# AUTHORS\r\n\r\nThe following person is the authors of all the files provided in this\r\ndistribution unless explicitly noted otherwise.\r\n\r\nMarcel Gruenauer <marcel@cpan.org>, [http://marcelgruenauer.com](http://marcelgruenauer.com)\r\n\r\n# COPYRIGHT AND LICENSE\r\n\r\nThe following copyright notice applies to all the files provided in this\r\ndistribution, including binary files, unless explicitly noted otherwise.\r\n\r\nThis software is copyright (c) 2013 by Marcel Gruenauer.\r\n\r\nThis is free software; you can redistribute it and/or modify it under the same\r\nterms as the Perl 5 programming language system itself.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}